#!/usr/bin/env python3

import argparse
import os
import json
import subprocess
import re


def append_extent(value, lst):
  if ',' in value:
    start, length = value.split(',', 1)
    length = int(length)
    if length > 0:
      start = int(start)
      while length > 1:
        lst.append(start)
        start += 1
        length -= 1
  else:
    lst.append(int(value))


def get_line_diffs(prev, post):

  result = ([], [])
  args = ['git', 'diff', '--unified=0', '--no-index', '--ignore-blank-lines', '--ignore-all-space', prev, post]
  complete = subprocess.run(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, encoding='utf-8')
  if len(complete.stderr) != 0:
    print("git diff failed: ", complete.stderr, "\n", sep='')
    exit(1)

  lines = complete.stdout.split('\n')
  pat_header = re.compile(r'@@ -(\S*)\s+\+(\S*) @@')
  for line in lines:
    match = pat_header.match(line)
    if match:
      append_extent(match[1], result[0])
      append_extent(match[2], result[1])

  return result


def get_bc_diffs(dir, prev, post, orcl):
  args = ['brt-diff', '-output', dir, os.path.join(dir, prev), os.path.join(dir, post)]
  if orcl is not None:
    args.append(os.path.join(dir, orcl))
  complete = subprocess.run(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, encoding='utf-8')
  return complete.returncode == 0


def main(args):

  ret_code = 1
  if len(args.modules) < 2:
    print("Must specify at least a prev and post version")
    return ret_code

  prev_module = args.modules[0]
  post_module = args.modules[1]
  orcl_module = None

  if len(args.modules) > 2:
    orcl_module = args.modules[2]
    if len(args.modules) > 3:
      print("Extra module arguments ignored")  

  diff = {}
  diff_file = os.path.join(args.dir, "diff.json")
  if get_bc_diffs(args.dir, prev_module, post_module, orcl_module):
    with open(diff_file) as infile:
      diff = json.load(infile)

  if len(diff) == 0:
    print("Failed to load/generate diff")
    return ret_code

  prev_srcs = diff['prev-module']['sources']
  post_srcs = diff['post-module']['sources']
  if len(prev_srcs) != len(post_srcs):
    print("prev/post differ in number of source files")
    return ret_code

  # match source files by name
  prev_map = {}
  for src in prev_srcs:
    prev_map[os.path.basename(src)] = src
  post_map = {}
  for src in post_srcs:
    post_map[os.path.basename(src)] = src

  for fname, prev_src in prev_map.items():
    if fname not in post_map:
      print("matching post src file not found:", fname)  
    else:
      post_src = post_map[fname]

      pr = get_line_diffs(prev_src, post_src)
      prev_srcs[prev_src]["lines"] = pr[0]
      post_srcs[post_src]["lines"] = pr[1]

  _indent=None
  _sort_keys=False
  if args.indent:
    _indent=2
    _sort_keys=True

  with open(diff_file, "w") as outfile:
    json.dump(diff, outfile, indent=_indent, sort_keys=_sort_keys)
    outfile.write("\n")
    ret_code = 0

  return ret_code


if __name__ == "__main__":

  parser = argparse.ArgumentParser(description="constructs diff.json file describing difference between two programs")
  parser.add_argument('modules', metavar='module.bc', nargs='+', type=str, help='prepared bitcode modules')
  parser.add_argument('-d', '--dir', required=True, help='directory containing module files')
  parser.add_argument('--indent', default=False, action='store_true', help='pretty print json output')
  args = parser.parse_args()
  exit(main(args))
