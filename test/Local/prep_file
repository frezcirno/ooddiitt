#!/usr/bin/env bash

if [[ ${1} == "" ]]; then
  echo "Usage: prep_file basename"
  exit 1
fi

export TARGET="${1}"

export TOOL_ROOT="/usr/local/stow"
if [[ $(uname -s ) == "Darwin" ]]; then
  TOOL_ROOT="/usr/local/opt"
fi

export CLANG34="${TOOL_ROOT}/llvm-3.4/bin/clang"

export CFLAGS="-m32 -fno-builtin"

function ensure_binary {
  type $1 >/dev/null 2>&1 || { echo >&2 "$1 not found.  Aborting."; exit 1; }
}

ensure_binary zopper
ensure_binary clang-format
ensure_binary ${CLANG34}

rm -rf *.i ${TARGET}_cil.c ${TARGET}_decil.c ${TARGET}_return.c ${TARGET}_marked.c cfgs dots ${TARGET}.json ${TARGET}.bc

export CIL_MACHINE="short=2,2 int=4,4 long=4,4 long_long=8,4 pointer=4,4 alignof_enum=4 float=4,4 double=8,4 long_double=12,4 void=1 bool=1,1 fun=1,1 alignof_string=1 max_alignment=16 size_t=unsigned_int wchar_t=int char_signed=true const_string_literals=true big_endian=false __thread_is_keyword=true __builtin_va_list=true underscore_name=false"

cilly --envmachine --save-temps --noPrintLn --noInsertImplicitCasts -o /dev/null -c "${TARGET}.c"
rm *.i
prename "s/.cil.c/_cil.c/" *.c

decilify "${TARGET}_cil.c" > "${TARGET}_decil.c"
clang-format -style=file -i "${TARGET}_decil.c"

# refactor return statements
zopper -refactor-returns "${TARGET}_decil.c" -- ${CFLAGS} > "${TARGET}_return.c"
clang-format -i -style='LLVM' "${TARGET}_return.c"

# insert markers
zopper -insert-markers -info=${TARGET}.json "${TARGET}_return.c" -- ${CFLAGS}> "${TARGET}_marked.c"
clang-format -i -style='LLVM' "${TARGET}_marked.c"

# extract info and cfgs
zopper -write-info -info=${TARGET}.json "${TARGET}_marked.c" -- ${CFLAGS} 
zopper -write-cfgs -output=cfgs "${TARGET}_marked.c" -- ${CFLAGS}

echo "verifing info consistency"
chk-info --info=${TARGET}.json || exit 1;

# run analysis and build program
cfg-analyze --input=cfgs --info=${TARGET}.json
cfg-dot --input=cfgs --output=dots

${CLANG34} -emit-llvm -g -c ${CFLAGS} -o "${TARGET}.bc" "${TARGET}_marked.c"
